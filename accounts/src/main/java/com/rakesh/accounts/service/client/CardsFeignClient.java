package com.rakesh.accounts.service.client;

import com.rakesh.accounts.dto.CardsDto;
import org.springframework.cloud.openfeign.FeignClient;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;

/*This interface is created so that we can communicate with the cards microservice from our service,
Here we have to give the same name that is used by the end service to register in eureka */
@FeignClient("cards")
public interface CardsFeignClient {

  /*Whatever methods we declare here should exactly match with the end service method that we
    want to hit from our service, We can remove the validations because those will be performed at the
    REST Api levels on the end service,
    We have to use the exact mapping type and path for our method, the path has to be the full mapping
    path if the end controller has some root mapping defined in the class
    We also have to create the same Dto in our service too, so that when we get the response we can map
    them with the Dto class variables
    consumes is optional, but we can give it ti tell that our this declared method accepts json.

  So behind the scenes, my cards FeignClient will connect with the Eureka Server and try to fetch
  all the instances that are registered with the logical name cards. And once it receives 1 or 2
  or any other instance details, it will try to cache those details for 30s,which is the default
  period. And within these 30s it is not going to connect again with the Eureka Server, but instead
  it is going to leverage the details present inside the cache.So based upon the IP details inside
  the cache, it is going to invoke this API along with the request which is mobile number in this case.
  So behind the scenes, all the implementation code will be generated by the open feign client. So here you
  can see we have not written any business logic.We are just telling to our feign client how to
  connect to other microservice. What is the method signature,what is the request parameter,what
  is the request structure,what is the response structure,what is the rest API path, So if you
  define those meta details, the remaining magic will be taken care by the feign client.
    */

  @GetMapping(value = "/api/fetch", consumes = "application/json")
  public ResponseEntity<CardsDto> fetchCardDetails(@RequestParam String mobileNumber);
}
