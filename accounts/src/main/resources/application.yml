server:
  port: 8080

spring:
  application:
    name: "accounts"
  profiles:
    active: "prod"
  datasource:
    url: jdbc:mysql://localhost:3307/accountsdb
    username: root
    password: password
  jpa:
    show-sql: true
  sql:
    init:
      mode: always
    #    This tells springboot where is our config server located
    #  When we do some configuration changes in github while our services are running, then to reflect those changes
    #  we have to enable actuator endpoints in the service and hit one specific endpoint called refresh
    #  eg:- http://localhost:9000/actuator/refresh is the endpoint for this service
  #  this is not a feasible option because lets say if we have many instances of our service then we have to refresh all
  #  the instances. hence we will use spring bus which uses rabbit mq like below
  config:
    import: "optional:configserver:http://localhost:8071/"

  # This is to enable circuitbreaker for the feign client
  cloud:
    openfeign:
      circuitbreaker:
        enabled: true
    # updateCommunication is the method we have defined inside AccountsFunction class, if we have multiple functions
    # we can separate then using ;
    function:
      definition: updateCommunication
    #This is for RabbitMQ/Kafka messaging using streams
    stream:
      bindings:
        updateCommunication-in-0:
          destination: communication-sent
          group: ${spring.application.name}
        sendCommunication-out-0:
          destination: send-communication


    #Here we wanted to refresh all the instances of our service so that they can fetch the latest config file from GitHub
    #We can do it manually by hitting refresh endpoints of each service instances, but the better way is using spring cloud
    #bus, run the rabbitmq (docker run -it --rm --name rabbitmq -p 5672:5672 -p 15672:15672 rabbitmq:3.12-management),
    #then add the dependency of cloud bus in pom.xml and add he below rabbitmq properties and
    #invoke the busrefresh api given by actuator on any running service, this endpoint will fetch the latest config file
    #for all the instances of all other services too, just that all other instances should also register on the same
    #rabbitmq.
    #    This is also used for RabbitMQ streams
#  rabbitmq:
#    host: "localhost"
#    port: 5672
#    username: "guest"
#    password: "guest"
#    connection-timeout: 10s
      kafka:
        binder:
          brokers:
            -localhost:9092



#These are for the circuitbreaker pattern, retry pattern and rate limiter pattern
resilience4j:
  circuitbreaker:
    configs:
      default:
        sliding-window-size: 10
        permitted-number-of-calls-in-half-open-state: 2
        failure-rate-threshold: 50
        wait-duration-in-open-state:
          seconds: 10
  retry:
    configs:
      default:
        max-attempts: 3
        wait-duration:
          seconds: 2
        enable-exponential-backoff: true
        exponential-backoff-multiplier: 2
        #This defines that if we have an exception of type NullPointer, do not retry as it is worthless, directly call the fallback method
        #we can define multiple exceptions here
        ignore-exceptions:
          - java.lang.NullPointerException
        #This defines that if we have an exception of type Timeout, then only retry, all other types of exceptions will be ignored,
        #and the fallback method will be directly call, we can define multiple exceptions here,
        #one thing is that when we are using retry-exceptions we don't have to specify ignore-exceptions key, it's of no use
        retry-exceptions:
          - java.util.concurrent.TimeoutException
  ratelimiter:
    configs:
      default:
        #Here I am telling that for 1 second 5 requests are allowed, and if the system is busy wait for 2 seconds then execute the
        #fallback logic
        timeout-duration:
          seconds: 2
        limit-refresh-period:
          seconds: 5
        limit-for-period: 1



#This will enable all the endpoints given by the actuator
management:
  endpoints:
    web:
      exposure:
        include: "*"
  health:
    readinessstate:
      enabled: true
    livenessstate:
      enabled: true
  endpoint:
    shutdown:
      enabled: true
    health:
      probes:
        enabled: true
  info:
    env:
      enabled: true
      #  With the help of this property we are telling to the micrometer and Prometheus, please group all my metrics related to the
      #  accounts microservice under the application name, which is accounts. This is going to help you to identify the metrics of
      #  each of the microservice. Otherwise, you cannot really identify which metrics belongs to which microservice.
  metrics:
    tags:
      application: ${spring.application.name}

endpoints:
  shutdown:
    enabled: true


eureka:
  instance:
    prefer-ip-address: true
    lease-renewal-interval-in-seconds: 10
  client:
    fetch-registry: true
    register-with-eureka: true
    service-url:
      defaultZone: http://localhost:8070/eureka/

#This info will be shown on the eureka dashboard for this service
info:
  app:
    name: "accounts"
    description: "Rakesh Bank Account Application"
    version: "1.0.0"

logging:
  level:
    com:
      rakesh:
        accounts: DEBUG
  pattern:
    level: "%5p [${spring.application.name},%X{trace_id},%X{span_id}]"