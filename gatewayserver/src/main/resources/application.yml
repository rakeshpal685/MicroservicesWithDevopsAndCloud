spring:
  application:
    name: "gatewayserver"
    #    This tells springboot where is our config server located
    #  When we do some configuration changes in github while our services are running, then to reflect those changes
    #  we have to enable actuator endpoints in the service and hit one specific endpoint called refresh
    #  eg:- http://localhost:PORT/actuator/refresh is the endpoint for this service
  #  this is not a feasible option because let's say if we have many instances of our service then we have to refresh all
  #  the instances. hence we will use spring bus which uses rabbit mq like below
  config:
    import: "optional:configserver:http://localhost:8071/"

  #This is to tell the gateway that connect to the eureka and get all the details about the
  #registered microservices, so that the request from the external client is passed on to the
  #appropriate service, lowercaseServiceId defines to accept the service name in completely lowercase,
  #  it is useful when our registered services has capital letters and our routing url has small case letters
  cloud:
    gateway:
      discovery:
        locator:
          enabled: false
          lowerCaseServiceId: true
      #This httpclient property is given so that after the specified time our circuit breaker will trigger, if we don't provide
      #this there is already a default value present inside circuit breaker, we can change the values for each service individually
      httpclient:
        #ConnectionTimeout defines how much time my current service is taking to connect to the end service
        connect-timeout: 1000
        #Response timeout defines how much time is taken by the end service to respond to the request
        response-timeout: 10s
  #This is for redis which we are using in ratelimiter pattern for resilience purposes
  data:
    redis:
      connect-timeout: 2s
      host: localhost
      port: 6379
      timeout: 1s

  #This is for the keycloak configuration,this is the server url using which my resource server can download the certificates
  #  during the startup of this resource server application.
  #  It is going to connect with the resource server and it is going to download a public certificate from#
  #  the Keycloak server. So what is the purpose of this public certificate? Using this public certificate,
  #  my resource server can validate if a given access token is really issued by the Keycloak server.
  #  If yes, is it a valid access token or an invalid access token? So all those checks on the access token,
  #  it can perform with the help of this public certificate.
  security:
    oauth2:
      resourceserver:
        jwt:
          jwk-set-uri: "http://localhost:7080/realms/master/protocol/openid-connect/certs"


  #This will enable all the endpoints given by the actuator
management:
  endpoints:
    web:
      exposure:
        include: "*"
  endpoint:
    gateway:
      enabled: true
  info:
    env:
      enabled: true
  metrics:
    tags:
      application: ${spring.application.name}

#This info will be shown on the eureka dashboard for this service
info:
  app:
    name: "gatewayserver"
    description: "Rakesh Bank Gateway Server Application"
    version: "1.0.0"



logging:
  level:
    com:
      rakesh:
        gatewayserver: DEBUG
  pattern:
    level: "%5p [${spring.application.name},%X{trace_id},%X{span_id}]"

#This circuit breaker properties will be applicable to all the circuit breakers, if we want to
#apply individual properties to the circuit breaker then instead of default we have to use the
#circuit breaker name that we have defined in our Gatewayserver main class

resilience4j:
  circuitbreaker:
    configs:
      default:
        sliding-window-size: 10
        permitted-number-of-calls-in-half-open-state: 2
        failure-rate-threshold: 50
        wait-duration-in-open-state:
          seconds: 10
